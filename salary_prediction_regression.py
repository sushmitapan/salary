# -*- coding: utf-8 -*-
"""salary_prediction_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OAtHQBeKaZyKzsqCdD2CKjd1jL0aYVN1
"""

# !pip install seaborn

# from google.colab import drive
# drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
# from matplotlib.pyplot import xticks
# from matplotlib.pyplot import yticks

df = pd.DataFrame(pd.read_csv("Salary Data.csv"))
df

row,col = df.shape
print("No of rows = ",row)
print("No of cols = ",col)

df.describe()

df.isna().sum()

df = df.dropna()

df.isna().sum()

df.columns

df.shape

df.info()

# df['Gender'] = df['Gender'].astype('category')
# df.info()

# # Checking Null values
# df.isnull().sum()
# # There are no NULL values in the dataset, hence it is clean.

print(len(set(df['Job Title'])))
print(len(set(df['Gender'])))
print(len(set(df['Education Level'])))

# df = df.dropna()

# EDA

auto=df[['Age', 'Gender', 'Education Level', 'Years of Experience','Salary']]

sns.pairplot(auto)

auto1=df[['Age', 'Years of Experience','Salary']]
auto1.corr()

# Starting machine learning
import seaborn as sns
plt.figure(figsize=(15,5))
sns.heatmap(auto1.corr(),annot=True)
plt.show()

auto

# Dimension reduction

gender = pd.get_dummies(auto['Gender'], drop_first = True)
gender

auto = pd.concat([auto, gender], axis = 1)
auto

education = pd.get_dummies(auto['Education Level'], drop_first = False)
education

auto = pd.concat([auto, education], axis = 1)
auto

# auto=df[['Age', 'Gender', 'Education Level', 'Job Title', 'Years of Experience',
#        'Salary']]

auto = auto.drop(['Gender','Education Level'],axis = 1)
auto

auto.corr()

# Starting machine learning
import seaborn as sns
plt.figure(figsize=(15,5))
sns.heatmap(auto.corr(),annot=True)
plt.show()

auto = auto.drop(['Male'],axis = 1)
auto

# auto['Salary'] = auto['Salary'].astype('int')

from sklearn.model_selection import train_test_split
# We specify this so that the train and test data set always have the same rows, respectively
df_train, df_test = train_test_split(auto, train_size = 0.85, test_size = 0.15, random_state = 1)

df_train.shape

df_test.shape



from sklearn.linear_model import LinearRegression
X_train = df_train[['Age','Years of Experience',"Bachelor's",
                    "Master's","PhD"]]
y_train = df_train['Salary']
# df_test_predict = X_train.iloc[0:1]
# for linear regression
lm = LinearRegression()
lr_model = lm.fit(X_train, y_train)

# #for logistic regression
from sklearn.linear_model import LogisticRegression
lg = LogisticRegression()
lg_model = lg.fit(X_train, y_train)

# #for polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=7)
X_poly = poly_reg.fit_transform(X_train)
pol_reg = LinearRegression()
pol_reg.fit(X_poly, y_train)

# model.predict(df_test_predict)

print("Linear regression = ",lr_model.score(X_train, y_train))
print("Logistic regression = ",lg_model.score(X_train, y_train))
print("Polynomial regression = ",pol_reg.score(poly_reg.fit_transform(X_train), y_train))

data = df_test.iloc[3:4]
actual_salary = data['Salary']
data = data.drop(['Salary'],axis = 1)
data

print("Predicted Salary using linear regression",lr_model.predict(data))
print("Predicted Salary using logistic regression",lg_model.predict(data))
print("Predicted Salary using Polynomial regression",pol_reg.predict(poly_reg.fit_transform(data)))

print("Actual Salary",actual_salary)

data = {'Age':[int(input("Enter age = ")) for i in range(1)],
        'Years of Experience':[float(input("Enter age = ")) for i in range(1)],
        "Bachelor's":[int(input("Bachelors's degree ? Enter 1 or 0 = ")) for i in range(1)],
        "Master's":[int(input("Master's degree ? Enter 1 or 0 = ")) for i in range(1)],
         "PhD":[int(input("Phd degree ? Enter 1 or 0 = ")) for i in range(1)]}

df = pd.DataFrame(data)
predicted_salary = pol_reg.predict(poly_reg.fit_transform(df))
print("predicted Salary",predicted_salary)
df

plt.scatter(y_train,lr_model.predict(X_train),color = 'red')
plt.xlabel('Actual Salary')
plt.ylabel('Predicted Salary')
plt.show()

plt.scatter(y_train,lg_model.predict(X_train),color = 'red')
plt.xlabel('Actual Salary')
plt.ylabel('Predicted Salary')
plt.show()

plt.scatter(y_train,pol_reg.predict(poly_reg.fit_transform(X_train)),color = 'red')
plt.xlabel('Actual Salary')
plt.ylabel('Predicted Salary')
plt.show()

x = [i for i in range(15)]
plt.scatter(x,x,color = 'red')

